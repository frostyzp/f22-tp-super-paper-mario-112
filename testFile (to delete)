
# SIDESCROLLER 3

class GameObject:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height

    def getBounds(self):
        (x0, y1) = (self.x, self.height/2 - self.y)
        (x1, y0) = (x0 + self.width, y1 - self.height)
        return (x0, y0, x1, y1)

    # def boundsIntersect(self, other):
    #    (ax0, ay0, ax1, ay1) = self.getBounds()
    #     others.getBounds()
    #     return ((a>))

    def draw(self, canvas, scrollX):

        pass

    # Create an imageObject, which can load images and puts it in the right spot?

class Player(GameObject):
    def draw(self, canvas, scrollX):
        (x0, y0, x1, y1) = self.getBounds()
        canvas.create_oval(x0-scrollX, y0, x1-scrollX, y1, fill='cyan')
        pass
# app.player = GameObject(app.scrollMargin, 0, playerWidth, playerHeight)

# LECTURE! 
# def timerFired(app):

#     # update position based on velocity
#     # update velocity based on acceleration


#     app.x += app.dx
#     app.y += app.dy

#     app.y += app.dy
#     app.dy += app.ddy 



# class Ball:
#     nextId = 0


# class Buttons:



from cmu_112_graphics import *
import random


class Button:
    def __init__(self, x, y, attachedFunction = None):
        self.x0 = x
        self.y0 = y
        self.height = 100
        self.width = 200
        self.x1 = self.x0 + self.width
        self.y1 = self.y0 + self.height
        self.color = 'red'

        self.attachedFunction = attachedFunction

    def redraw(self, canvas):
        canvas.create_rectangle(self.x0, self.y0, self.x1, self.y1, fill = self.color)

    def mousePressed(self, eventX, eventY, app):
        # We are guaranteed (event.x, event.y) is in this dot
        # self.counter += 1
        # self.color = getRandomColor()

        if self.x0 <= eventX <= self.x1 and self.y0 <= eventY <= self.y1:
            print('yay')
            if self.attachedFunction == None:
                self.attachedFunction(app)


class Dot:
    def __init__(self, cx, cy, r, counter, color):
        self.cx = cx
        self.cy = cy
        self.r = r
        self.counter = counter
        self.color = color

    def redraw(self, app, canvas):
        # Only redraw this dot
        canvas.create_oval(self.cx-self.r, self.cy-self.r,
                           self.cx+self.r, self.cy+self.r,
                           fill='white', outline=self.color, width=15)
        canvas.create_text(self.cx, self.cy, text=str(self.counter),
                           fill='black')

    def containsPoint(self, x, y):
        return (((self.cx - x)**2 + (self.cy - y)**2)**0.5 <= self.r)

    def mousePressed(self, eventX, eventY):
        # We are guaranteed (event.x, event.y) is in this dot
        self.counter += 1
        self.color = getRandomColor()

        if self.x0 <= eventX <= self.x1 and self.y0 <= eventY <= self.y1:
            print('mousePressed!')



    def timerFired(self, app):
        self.counter += 1




def appStarted(app):
    app.dots = [ ]
    app.timerDelay = 1000 # once per second
    app.myString = ''

    app.buttons = []
    # PASS INTO FUNCTIONS
    app.buttons.append(Button(200,300, buttonFunctionA))
    app.buttons.append(Button(50, 50))
    # app.buttons.append(Button(50, 50))


def buttonFunctionA(app):
    print("A button")
    for dot in app.dots:
        dot.r -= 1

def buttonFunctionB(app):
    print("B button")
    for dot in app.dots:
        dot.r += 1

def getRandomColor():
    colors = ['red', 'orange', 'yellow', 'green', 'blue', 'pink',
              'lightGreen', 'gold', 'magenta', 'maroon', 'salmon',
              'cyan', 'brown', 'orchid', 'purple']
    return random.choice(colors)

def mousePressed(app, event):
    anyButtonPressed = False
    for button in app.buttons:
        if button.mousePressed(event.x, event.y, app):
            anyButtonPressed = True

    if anyButtonPressed == False:
        pass


def keyPressed(app, event):
    pass

def timerFired(app):
    for dot in app.dots:
        dot.timerFired(app)


def redrawAll(app, canvas):
    for dot in app.dots:
        dot.redraw(app, canvas)

    for button in app.buttons:
        button.redraw(canvas)


    # draw the text
    canvas.create_text(app.width/2, 20,
                       text=app.myString +'Example: Adding and Deleting Shapes',
                       fill='black')


runApp(width=400, height=400)

 